{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/todos.ts","helpers/helpers.ts","App.tsx","index.tsx"],"names":["id","name","username","email","UserInfo","React","memo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","userId","findUserByID","usersFromServer","find","getPreparedTodos","todosFromServer","getHighestTodoID","length","IDs","element","Math","max","App","useState","setTodos","setTitle","selectedUserID","setSelectedUserID","isTitleEmpty","setIsTitleEmpty","isUserIdEmpty","setIsUserIdEmpty","handleFormSubmit","newTodo","prevTodos","action","method","onSubmit","event","preventDefault","type","placeholder","value","onChange","currentTarget","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b59867c8.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = React.memo(\n  ({ user }) => (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  ),\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { PreparedTodo } from '../../types/PreparedTodo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: PreparedTodo;\n};\n\nexport const TodoInfo: React.FC<Props> = React.memo(\n  ({ todo }) => {\n    const {\n      id,\n      title,\n      completed,\n      user,\n    } = todo;\n\n    return (\n      <article\n        data-id={id}\n        className={classNames(\n          'card has-background-white-ter',\n          'TodoInfo',\n          { 'TodoInfo--completed': completed },\n        )}\n      >\n        <h2 className=\"TodoInfo__title card-header-title\">\n          {title}\n        </h2>\n\n        {user && (\n          <UserInfo user={user} />\n        )}\n      </article>\n    );\n  },\n);\n","import React from 'react';\nimport { PreparedTodo } from '../../types/PreparedTodo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: PreparedTodo[];\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({ todos }) => (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  ),\n);\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import todosFromServer from '../api/todos';\nimport usersFromServer from '../api/users';\n\nimport { PreparedTodo } from '../types/PreparedTodo';\nimport { User } from '../types/User';\n\nexport function findUserByID(userId: number): User | null {\n  return usersFromServer.find(user => user.id === userId) || null;\n}\n\nexport function getPreparedTodos(): PreparedTodo[] {\n  return todosFromServer.map(todo => ({\n    ...todo,\n    user: findUserByID(todo.userId),\n  }));\n}\n\nexport function getHighestTodoID(todos: PreparedTodo[]) {\n  if (todos.length === 0) {\n    return 1;\n  }\n\n  const IDs = todos.map(element => element.id);\n\n  return Math.max(...IDs) + 1;\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport 'bulma/css/bulma.css';\n\nimport usersFromServer from './api/users';\nimport { TodoList } from './components/TodoList';\n\nimport {\n  findUserByID,\n  getPreparedTodos,\n  getHighestTodoID,\n} from './helpers/helpers';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState(getPreparedTodos);\n  const [title, setTitle] = useState('');\n  const [selectedUserID, setSelectedUserID] = useState(0);\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [isUserIdEmpty, setIsUserIdEmpty] = useState(false);\n\n  const clearForm = () => {\n    setTitle('');\n    setSelectedUserID(0);\n    setIsTitleEmpty(false);\n    setIsUserIdEmpty(false);\n  };\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.currentTarget.value);\n\n    if (isTitleEmpty) {\n      setIsTitleEmpty(false);\n    }\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserID(+event.currentTarget.value);\n\n    if (isUserIdEmpty) {\n      setIsUserIdEmpty(false);\n    }\n  };\n\n  const handleFormSubmit = () => {\n    if (!title || !selectedUserID) {\n      setIsTitleEmpty(!title);\n      setIsUserIdEmpty(!selectedUserID);\n\n      return;\n    }\n\n    const newTodo = {\n      id: getHighestTodoID(todos),\n      title,\n      completed: false,\n      userId: selectedUserID,\n      user: findUserByID(selectedUserID),\n    };\n\n    setTodos((prevTodos => [newTodo, ...prevTodos]));\n\n    clearForm();\n  };\n\n  return (\n    <div className=\"App section content\">\n      <h1 className=\"title is-1\">Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          handleFormSubmit();\n        }}\n      >\n        <div className=\"field\">\n          <label>\n            <input\n              type=\"text\"\n              placeholder=\"Write your title\"\n              className=\"input\"\n              data-cy=\"titleInput\"\n              value={title}\n              onChange={handleTitleChange}\n            />\n\n            {isTitleEmpty && (\n              <span className=\"error\">Please enter a title</span>\n            )}\n          </label>\n        </div>\n\n        <div className=\"field select mr-2\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUserID}\n            onChange={handleUserChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => {\n              return (\n                <option value={user.id} key={user.id}>\n                  {user.name}\n                </option>\n              );\n            })}\n          </select>\n\n          {isUserIdEmpty && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n        <button type=\"submit\" className=\"button mb-5\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <section className=\"TodoList\">\n        <TodoList todos={todos} />\n      </section>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}